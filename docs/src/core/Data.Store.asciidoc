== NAME ==

MITHGrid.Data.initStore

== SYNOPSIS ==

--------------------------------------------------------------------------------------------
 store = MITHGrid.Data.initStore({ options list... });

 store.loadItems([ list of objects... ]);

 item = store.getItem(itemId);

 store.updateItems([ list of objects... ]);

 store.removeItems([ list of object ids... ]);

 store.events.onBeforeLoading.addListener(function() { ... });
--------------------------------------------------------------------------------------------

== DESCRIPTION ==

The data store object stores the actual triples that make up the application data. Other objects can watch the data source and
receive event notifications when data is modified, deleted, or added. Most interactions with the data source will happen through
the appropriate data views.

A plugin should register its expected item types and properties with the data source. This can be done through the data view,
which will pass along the type and property information to the data source object.

== EVENTS ==

Events are listed as properties of the +events+ property. For example, the +onModelChange+ event is available as the
+events.onModelChange+ property of the data store object.

Generally, you don't need to register event handlers unless you are working with components outside the standard MITHGrid
framework. Data views, presentations, plugins, and applications automatically handle all of the needed event handler
registration to make everything work.

onModelChange::
  This event is fired when the data store modifies its data in any way. The event handler will be passed the data store
object as well as a list of item identifiers for items that have been added, modified, or removed.
+
If you are writing an event handler for this event, then if an item id is passed that is not contained in the data store,
then that item was in the data store but has been removed. The following code gives a way to detect removed items:
+
--------------------------------------------------------------------------------------------
if(!store.contains(itemId)) {
  // do something about the removed item
}
else {
  // either the item was added or updated
}
--------------------------------------------------------------------------------------------

onBeforeLoading::
  This event is fired before the data store begins adding items. No information is passed to the event handler
about what items might be added.

onAfterLoading::
  This event is fired after the data store has added items. No information is passed to the event handler about
what items might have been added. If you need to know which items were added, use the onModelChange event or
pair with a handler for +onBeforeLoading+ that lets you compare the list of item identifiers from before the
loading with the list from after the loading.

onBeforeUpdating::
  This event is fired before the data store begins updating items. No information is passed to the event handler
about what items might be added.

onAfterUpdating::
  This event is fired after the data store has updated items. No information is passed to the event handler about
what items might have been added. If you need to know which items were added, use the onModelChange event.

== METHODS ==

=== Constructor ===

--------------------------------------------------------------------------------------------
store = MITHGrid.Data.initStore({ options list... })
--------------------------------------------------------------------------------------------

The constructor initializes an empty data store. No options are used at present, but may be used in the future when providing
a server-based data source.

=== Schema ===

The data store has a minimal schema that lets it know how to handle properties in expressions.

addProperty(name, { options... })::
  Adds the named property to the schema. The only option used at present is +valueType+, which should be one of the following:

  date;;
    Values are dates and/or times.

  item;;
    Values are pointers to other items.

  number;;
    Values are numeric.

  text;;
    Values are plain text with no special interpretation.


getProperty(name)::
  Returns the property metadata object.

addType(name, { options... })::
  Adds the named item type to the schema. No options are used at present.

getType(name);;
  Returns the type metadata object.

=== Data Access ===

getItem(itemId)::
  Returns the properties associated with the +itemId+. All properties map to arrays regardless of the number of values the
property might have.

getItems([ list of itemIds... ])::
  Returns a list of objects holding the properties associated with the list of item identifiers.

items( )::
  Returns the number of items in the data store.

contains(itemId)::
  Returns +true+ if the given +itemId+ is the identifier of an item in the data store.

=== Data Management ===

loadItems([ list of items... ])::
  Adds the provided list of objects to the data store.

updateItems([ list of items... ])::
  Updates the data store using the list of objects provided.

removeItems([ list of itemIds... ])::
  Removes the items from the data store indicated by the item identifiers.

=== Graph Traversal ===

MITHGrid provides a graph traversal language based on the MIT Simile Exhibit library. Properties that are marked as of type +item+
hold the unique identifiers of items in the data store and can be used to hop from item to item.

prepare([ list of expressions... ])::
  This method prepares the list of expressions for execution against the data store.

=== SEE ALSO ===